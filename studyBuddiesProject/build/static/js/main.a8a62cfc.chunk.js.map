{"version":3,"sources":["Lobby.js","Participant.js","Room.js","VideoChat.js","App.js","serviceWorker.js","index.js"],"names":["Lobby","username","handleUsernameChange","roomName","handleRoomNameChange","handleSubmit","connecting","onSubmit","htmlFor","type","id","value","onChange","readOnly","required","disabled","Participant","participant","useState","videoTracks","setVideoTracks","audioTracks","setAudioTracks","videoRef","useRef","audioRef","trackpubsToTracks","trackMap","Array","from","values","map","publication","track","filter","useEffect","on","kind","v","a","removeAllListeners","videoTrack","attach","current","detach","audioTrack","className","identity","ref","autoPlay","muted","Room","room","handleLogout","participants","setParticipants","participantConnected","prevParticipants","participantDisconnected","p","forEach","off","remoteParticipants","sid","onClick","localParticipant","VideoChat","setUsername","setRoomName","setRoom","setConnecting","useCallback","event","target","preventDefault","fetch","method","body","JSON","stringify","headers","then","res","json","data","Video","connect","token","name","catch","err","console","error","prevRoom","tracks","trackPub","stop","disconnect","render","tidyUp","persisted","window","addEventListener","removeEventListener","App","role","aria-label","href","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8a62cfc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Lobby = ({\r\n  username,\r\n  handleUsernameChange,\r\n  roomName,\r\n  handleRoomNameChange,\r\n  handleSubmit,\r\n  connecting,\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2>Enter a room</h2>\r\n      <div>\r\n        <label htmlFor=\"name\">Name:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"field\"\r\n          value={username}\r\n          onChange={handleUsernameChange}\r\n          readOnly={connecting}\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <label htmlFor=\"room\">Room name:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"room\"\r\n          value={roomName}\r\n          onChange={handleRoomNameChange}\r\n          readOnly={connecting}\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <button type=\"submit\" disabled={connecting}>\r\n        {connecting ? \"Connecting\" : \"Join\"}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Lobby;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nconst Participant = ({ participant }) => {\r\n  const [videoTracks, setVideoTracks] = useState([]);\r\n  const [audioTracks, setAudioTracks] = useState([]);\r\n\r\n  const videoRef = useRef();\r\n  const audioRef = useRef();\r\n\r\n  const trackpubsToTracks = (trackMap) =>\r\n    Array.from(trackMap.values())\r\n      .map((publication) => publication.track)\r\n      .filter((track) => track !== null);\r\n\r\n  useEffect(() => {\r\n    setVideoTracks(trackpubsToTracks(participant.videoTracks));\r\n    setAudioTracks(trackpubsToTracks(participant.audioTracks));\r\n\r\n    const trackSubscribed = (track) => {\r\n      if (track.kind === \"video\") {\r\n        setVideoTracks((videoTracks) => [...videoTracks, track]);\r\n      } else if (track.kind === \"audio\") {\r\n        setAudioTracks((audioTracks) => [...audioTracks, track]);\r\n      }\r\n    };\r\n\r\n    const trackUnsubscribed = (track) => {\r\n      if (track.kind === \"video\") {\r\n        setVideoTracks((videoTracks) => videoTracks.filter((v) => v !== track));\r\n      } else if (track.kind === \"audio\") {\r\n        setAudioTracks((audioTracks) => audioTracks.filter((a) => a !== track));\r\n      }\r\n    };\r\n\r\n    participant.on(\"trackSubscribed\", trackSubscribed);\r\n    participant.on(\"trackUnsubscribed\", trackUnsubscribed);\r\n\r\n    return () => {\r\n      setVideoTracks([]);\r\n      setAudioTracks([]);\r\n      participant.removeAllListeners();\r\n    };\r\n  }, [participant]);\r\n\r\n  useEffect(() => {\r\n    const videoTrack = videoTracks[0];\r\n    if (videoTrack) {\r\n      videoTrack.attach(videoRef.current);\r\n      return () => {\r\n        videoTrack.detach();\r\n      };\r\n    }\r\n  }, [videoTracks]);\r\n\r\n  useEffect(() => {\r\n    const audioTrack = audioTracks[0];\r\n    if (audioTrack) {\r\n      audioTrack.attach(audioRef.current);\r\n      return () => {\r\n        audioTrack.detach();\r\n      };\r\n    }\r\n  }, [audioTracks]);\r\n\r\n  return (\r\n    <div className=\"participant\">\r\n      <h3>{participant.identity}</h3>\r\n      <video ref={videoRef} autoPlay={true} />\r\n      <audio ref={audioRef} autoPlay={true} muted={true} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Participant;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Participant from \"./Participant\";\r\n\r\nconst Room = ({ roomName, room, handleLogout }) => {\r\n  const [participants, setParticipants] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const participantConnected = (participant) => {\r\n      setParticipants((prevParticipants) => [...prevParticipants, participant]);\r\n    };\r\n\r\n    const participantDisconnected = (participant) => {\r\n      setParticipants((prevParticipants) =>\r\n        prevParticipants.filter((p) => p !== participant)\r\n      );\r\n    };\r\n\r\n    room.on(\"participantConnected\", participantConnected);\r\n    room.on(\"participantDisconnected\", participantDisconnected);\r\n    room.participants.forEach(participantConnected);\r\n    return () => {\r\n      room.off(\"participantConnected\", participantConnected);\r\n      room.off(\"participantDisconnected\", participantDisconnected);\r\n    };\r\n  }, [room]);\r\n\r\n  const remoteParticipants = participants.map((participant) => (\r\n    <Participant key={participant.sid} participant={participant} />\r\n  ));\r\n\r\n  return (\r\n    <div className=\"room\">\r\n      <h2>Room: {roomName}</h2>\r\n      <button onClick={handleLogout}>Log out</button>\r\n      <div className=\"local-participant\">\r\n        {room ? (\r\n          <Participant\r\n            key={room.localParticipant.sid}\r\n            participant={room.localParticipant}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n      <h3>Remote Participants</h3>\r\n      <div className=\"remote-participants\">{remoteParticipants}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Room;\r\n","import React, { useState, useCallback, useEffect } from \"react\";\r\nimport Video from \"twilio-video\";\r\nimport Lobby from \"./Lobby\";\r\nimport Room from \"./Room\";\r\n\r\nconst VideoChat = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [room, setRoom] = useState(null);\r\n  const [connecting, setConnecting] = useState(false);\r\n\r\n  const handleUsernameChange = useCallback((event) => {\r\n    setUsername(event.target.value);\r\n  }, []);\r\n\r\n  const handleRoomNameChange = useCallback((event) => {\r\n    setRoomName(event.target.value);\r\n  }, []);\r\n\r\n  const handleSubmit = useCallback(\r\n    async (event) => {\r\n      event.preventDefault();\r\n      setConnecting(true);\r\n      const data = await fetch(\"/video/token\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          identity: username,\r\n          room: roomName,\r\n        }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }).then((res) => res.json());\r\n      Video.connect(data.token, {\r\n        name: roomName,\r\n      })\r\n        .then((room) => {\r\n          setConnecting(false);\r\n          setRoom(room);\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n          setConnecting(false);\r\n        });\r\n    },\r\n    [roomName, username]\r\n  );\r\n\r\n  const handleLogout = useCallback(() => {\r\n    setRoom((prevRoom) => {\r\n      if (prevRoom) {\r\n        prevRoom.localParticipant.tracks.forEach((trackPub) => {\r\n          trackPub.track.stop();\r\n        });\r\n        prevRoom.disconnect();\r\n      }\r\n      return null;\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (room) {\r\n      const tidyUp = (event) => {\r\n        if (event.persisted) {\r\n          return;\r\n        }\r\n        if (room) {\r\n          handleLogout();\r\n        }\r\n      };\r\n      window.addEventListener(\"pagehide\", tidyUp);\r\n      window.addEventListener(\"beforeunload\", tidyUp);\r\n      return () => {\r\n        window.removeEventListener(\"pagehide\", tidyUp);\r\n        window.removeEventListener(\"beforeunload\", tidyUp);\r\n      };\r\n    }\r\n  }, [room, handleLogout]);\r\n\r\n  let render;\r\n  if (room) {\r\n    render = (\r\n      <Room roomName={roomName} room={room} handleLogout={handleLogout} />\r\n    );\r\n  } else {\r\n    render = (\r\n      <Lobby\r\n        username={username}\r\n        roomName={roomName}\r\n        handleUsernameChange={handleUsernameChange}\r\n        handleRoomNameChange={handleRoomNameChange}\r\n        handleSubmit={handleSubmit}\r\n        connecting={connecting}\r\n      />\r\n    );\r\n  }\r\n  return render;\r\n};\r\n\r\nexport default VideoChat;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport VideoChat from './VideoChat';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <header>\r\n        <h1>StudyBuddies</h1>\r\n      </header>\r\n      <main>\r\n        <VideoChat />\r\n      </main>\r\n      <footer>\r\n        <p>\r\n          Made with{' '}\r\n          <span role=\"img\" aria-label=\"React\">\r\n            ⚛️\r\n          </span>{' '}\r\n          by <a href=\"https://twitter.com/philnash\">philnash</a>\r\n        </p>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}